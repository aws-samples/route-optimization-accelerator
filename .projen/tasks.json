{
  "tasks": {
    "build": {
      "name": "build",
      "description": "Full release build for all affected projects",
      "steps": [
        {
          "exec": "pnpm exec nx run-many --target=build --output-style=stream --nx-bail",
          "receiveArgs": true
        }
      ]
    },
    "build:all": {
      "name": "build:all",
      "steps": [
        {
          "exec": "npx nx run-many --target=build --all --parallel 8"
        }
      ]
    },
    "clobber": {
      "name": "clobber",
      "description": "hard resets to HEAD of origin and cleans the local repo",
      "env": {
        "BRANCH": "$(git branch --show-current)"
      },
      "steps": [
        {
          "exec": "git checkout -b scratch",
          "name": "save current HEAD in \"scratch\" branch"
        },
        {
          "exec": "git checkout $BRANCH"
        },
        {
          "exec": "git fetch origin",
          "name": "fetch latest changes from origin"
        },
        {
          "exec": "git reset --hard origin/$BRANCH",
          "name": "hard reset to origin commit"
        },
        {
          "exec": "git clean -fdx",
          "name": "clean all untracked files"
        },
        {
          "say": "ready to rock! (unpushed commits are under the \"scratch\" branch)"
        }
      ],
      "condition": "git diff --exit-code > /dev/null"
    },
    "compile": {
      "name": "compile",
      "description": "Only compile for all affected projects",
      "steps": [
        {
          "exec": "pnpm exec nx run-many --target=compile --output-style=stream --nx-bail",
          "receiveArgs": true
        }
      ]
    },
    "default": {
      "name": "default",
      "description": "Synthesize project files",
      "steps": [
        {
          "exec": "ts-node --project tsconfig.dev.json .projenrc.ts"
        }
      ]
    },
    "eject": {
      "name": "eject",
      "description": "Remove projen from the project",
      "env": {
        "PROJEN_EJECTING": "true"
      },
      "steps": [
        {
          "spawn": "default"
        }
      ]
    },
    "eslint": {
      "name": "eslint",
      "description": "Runs eslint against the codebase for all affected projects",
      "steps": [
        {
          "exec": "pnpm exec nx run-many --target=eslint --output-style=stream --nx-bail",
          "receiveArgs": true
        }
      ]
    },
    "eslint-staged": {
      "name": "eslint-staged",
      "description": "Run eslint against the workspace staged files only; excluding ./packages/ files.",
      "steps": [
        {
          "exec": "eslint --fix --no-error-on-unmatched-pattern $(git diff --name-only --relative --staged HEAD . | grep -E '.(ts|tsx)$' | grep -v -E '^packages/' | xargs)"
        }
      ]
    },
    "git-secrets-scan": {
      "name": "git-secrets-scan",
      "steps": [
        {
          "exec": "git secrets --scan"
        }
      ]
    },
    "graph": {
      "name": "graph",
      "description": "Generate dependency graph for monorepo",
      "steps": [
        {
          "exec": "pnpm exec nx graph",
          "receiveArgs": true
        }
      ]
    },
    "infra:deploy": {
      "name": "infra:deploy",
      "steps": [
        {
          "exec": "npx nx run @route-optimization-accelerator/infra:deploy"
        }
      ]
    },
    "install": {
      "name": "install",
      "description": "Install project dependencies and update lockfile (non-frozen)",
      "steps": [
        {
          "exec": "pnpm i --no-frozen-lockfile"
        }
      ]
    },
    "install:ci": {
      "name": "install:ci",
      "description": "Install project dependencies using frozen lockfile",
      "steps": [
        {
          "exec": "pnpm i --frozen-lockfile"
        }
      ]
    },
    "license-check": {
      "name": "license-check",
      "steps": [
        {
          "exec": "npx license-checker --summary --production --onlyAllow 'MIT;Apache-2.0;Unlicense;UNLICENSED;BSD;BSD-2-Clause;BSD-3-Clause;ISC;Python-2.0;CC-BY-3.0;CC0-1.0' > ./reports/license-check.txt"
        }
      ]
    },
    "oss-attribution": {
      "name": "oss-attribution",
      "steps": [
        {
          "exec": "npx -p oss-attribution-generator@latest generate-attribution && mv oss-attribution/attribution.txt ./reports/LICENSE_THIRD_PARTY && rm -rf oss-attribution"
        }
      ]
    },
    "package": {
      "name": "package",
      "description": "Creates the distribution package for all affected projects",
      "steps": [
        {
          "exec": "pnpm exec nx run-many --target=package --output-style=stream --nx-bail",
          "receiveArgs": true
        }
      ]
    },
    "post-compile": {
      "name": "post-compile",
      "description": "Runs after successful compilation for all affected projects",
      "steps": [
        {
          "exec": "pnpm exec nx run-many --target=post-compile --output-style=stream --nx-bail",
          "receiveArgs": true
        }
      ]
    },
    "post-upgrade": {
      "name": "post-upgrade",
      "description": "Runs after upgrading dependencies"
    },
    "pre-compile": {
      "name": "pre-compile",
      "description": "Prepare the project for compilation for all affected projects",
      "steps": [
        {
          "exec": "pnpm exec nx run-many --target=pre-compile --output-style=stream --nx-bail",
          "receiveArgs": true
        }
      ]
    },
    "prepare": {
      "name": "prepare",
      "steps": [
        {
          "exec": "husky install"
        }
      ]
    },
    "run-many": {
      "name": "run-many",
      "description": "Run task against multiple workspace projects",
      "steps": [
        {
          "exec": "pnpm exec nx run-many",
          "receiveArgs": true
        }
      ]
    },
    "security-report-all": {
      "name": "security-report-all",
      "steps": [
        {
          "spawn": "security-report:bandit"
        },
        {
          "spawn": "security-report:pnpm-audit"
        },
        {
          "spawn": "security-report:cfn-nag"
        },
        {
          "spawn": "security-report:cdk-nag"
        }
      ]
    },
    "security-report:bandit": {
      "name": "security-report:bandit",
      "steps": [
        {
          "exec": "bandit --recursive . --format json --number 3 --severity-level high --exclude '**/node_modules/*,**/.nx/cache/*,**/.env/*,**/cdk.out/*,**/dist/*' --output reports/bandit-report.json"
        }
      ]
    },
    "security-report:cdk-nag": {
      "name": "security-report:cdk-nag",
      "steps": [
        {
          "exec": "mkdir -p reports/cdknag && rm -rf reports/cdknag/* && \\cp -r packages/infra-app/cdk.out/*-NagReport.csv reports/cdknag/"
        }
      ]
    },
    "security-report:cfn-nag": {
      "name": "security-report:cfn-nag",
      "steps": [
        {
          "exec": "(cfn_nag_scan --input-path=packages/infra-app/cdk.out --output-format json --template-pattern='^(?:(?!asset.[d|w]+.json)|(?=.*asset.[d|w]+/(?!asset-manifest|runtime-config|manifest)w+.json))(?!.*asset.[d|w]{32}/(?:asset-manifest|manifest|runtime-config).json)(?!.*buildspec-[d|w]+-FileAsset.yaml)(.*.json|.*.yaml|.*.yml|.*.template)$' > reports/cfn-nag-report.json) || exit 0;"
        }
      ]
    },
    "security-report:pnpm-audit": {
      "name": "security-report:pnpm-audit",
      "steps": [
        {
          "exec": "(pnpm audit --prod > reports/pnpm-audit-report.txt) || exit 0;"
        }
      ]
    },
    "test": {
      "name": "test",
      "description": "Run tests for all affected projects",
      "steps": [
        {
          "exec": "pnpm exec nx run-many --target=test --output-style=stream --nx-bail",
          "receiveArgs": true
        },
        {
          "spawn": "git-secrets-scan"
        }
      ]
    },
    "upgrade": {
      "name": "upgrade",
      "description": "upgrade dependencies",
      "env": {
        "CI": "0"
      },
      "steps": [
        {
          "exec": "pnpm dlx npm-check-updates@16 --upgrade --target=minor --peer --dep=dev,peer,prod,optional --filter=@commitlint/cli,@commitlint/config-conventional,cz-conventional-changelog,eslint-config-prettier,eslint-import-resolver-typescript,eslint-plugin-header,eslint-plugin-import,eslint-plugin-prettier,husky,license-checker,nodemon,npm-check-updates,oss-attribution-generator,prettier,ts-node,typedoc,typedoc-monorepo-link-types,typescript,@aws-cdk/aws-cognito-identitypool-alpha,@aws/pdk,aws-cdk-lib,cdk-nag,constructs,projen"
        },
        {
          "exec": "pnpm i --no-frozen-lockfile"
        },
        {
          "exec": "pnpm update @aws/pdk @commitlint/cli @commitlint/config-conventional @types/node @typescript-eslint/eslint-plugin @typescript-eslint/parser constructs cz-conventional-changelog eslint-config-prettier eslint-import-resolver-typescript eslint-plugin-header eslint-plugin-import eslint-plugin-prettier eslint husky license-checker nodemon npm-check-updates nx oss-attribution-generator prettier projen syncpack ts-node typedoc typedoc-monorepo-link-types typescript @aws-cdk/aws-cognito-identitypool-alpha aws-cdk-lib cdk-nag find-up"
        },
        {
          "exec": "pnpm exec projen"
        },
        {
          "spawn": "post-upgrade"
        }
      ]
    },
    "upgrade-deps": {
      "name": "upgrade-deps",
      "description": "Upgrade dependencies in the monorepo for all affected projects",
      "steps": [
        {
          "exec": "pnpm exec nx run-many --target=upgrade --output-style=stream --nx-bail --projects=@route-optimization-accelerator/optimization-engine,@route-optimization-accelerator/web-api-service,@route-optimization-accelerator/web-api-service-model,@route-optimization-accelerator/web-api-service-documentation-html-redoc",
          "receiveArgs": true
        },
        {
          "exec": "pnpm exec npm-check-updates --deep --rejectVersion 0.0.0 -u --dep prod,dev,peer,optional,bundle --target=minor"
        },
        {
          "exec": "pnpm exec syncpack fix-mismatches"
        },
        {
          "exec": "rm pnpm-lock.yaml"
        },
        {
          "exec": "pnpm i"
        },
        {
          "exec": "pnpm exec projen"
        }
      ]
    },
    "watch": {
      "name": "watch",
      "description": "Watch & compile in the background for all affected projects",
      "steps": [
        {
          "exec": "pnpm exec nx run-many --target=watch --output-style=stream --skip-nx-cache --nx-ignore-cycles --nx-bail",
          "receiveArgs": true
        }
      ]
    },
    "web:dev": {
      "name": "web:dev",
      "steps": [
        {
          "exec": "npx nx run @route-optimization-accelerator/admin-website:dev"
        }
      ]
    }
  },
  "env": {
    "PATH": "$(pnpm -c exec \"node --print process.env.PATH\")"
  },
  "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run \"pnpm exec projen\"."
}
